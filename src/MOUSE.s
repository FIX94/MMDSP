*************************************************************************
*									*
*									*
*	    Ｘ６８０００　ＭＸＤＲＶ／ＭＡＤＲＶディスプレイ		*
*									*
*				ＭＭＤＳＰ				*
*									*
*									*
*	Copyright (C) 1991,1992 Kyo Mikami.  All Rights Reserved.	*
*									*
*	Modified Masao Takahashi					*
*									*
*************************************************************************


		.include	iocscall.mac
		.include	doscall.mac
		.include	MMDSP.H

			.text
			.even


MOUSE_INIT:
		movem.l	d0-d2,-(sp)

		IOCS	_MS_INIT			*イニシャライズ
		IOCS	_MS_CUROF
		moveq	#0,d1
		IOCS	_SKEY_MOD
		moveq	#-1,d1
		IOCS	_SKEY_MOD
		moveq.l	#0,d1
		move.l	#$01FF_01FF,d2
		IOCS	_MS_LIMIT

		IOCS	_MS_CURGT			*座標を初期化しておく
		move.l	d0,MOUSE_X(a6)

*		moveq	#-1,d0
*		move.l	d0,MOUSE_X(a6)
*		moveq	#0,d0
*		move.l	d0,MOUSE_L(a6)

		clr.l	DRAG_FUNC(a6)

		movem.l	(sp)+,d0-d2
		rts

MOUSE_MOVE:
*		movem.l	d0-d3/a0-a1,-(sp)

		move.w	$0a0e.w,-(sp)		*!!  割り込み中にIOCSを使うとまずいため

		IOCS	_MS_GETDT			*ボタンの状態変化を調べる
		move.w	MOUSE_L(a6),d3
		move.w	d0,MOUSE_L(a6)
		eor.w	d0,d3
		and.w	d0,d3
		move.w	d3,MOUSE_LC(a6)

		lea.l	MOUSE_X(a6),a0			*座標の変化を調べる
		IOCS	_MS_CURGT
		move.w	(sp)+,$0a0e.w		*!!  割り込み中にIOCSを使うとまずいため
		cmp.l	(a0),d0
		beq	ms_move10

		bsr	MOUSE_ERASE

		move.l	d0,(a0)

		moveq.l	#0,d2				*座標決定
		move.w	d0,d2
		lsl.l	#7,d2
		swap.w	d0
		move.w	d0,d1
		lsr.w	#3,d1
		or.w	d1,d2
		and.w	#$7,d0
		move.w	d0,d1
		add.w	d0,d0
		add.w	d1,d0
		lsl.w	#3,d0

.if 0
		move.l	#TXTADR3,a1
		add.l	d2,a1

		lea.l	MSb_CHR0(pc),a0
		lea.l	0(a0,d0.w),a0

		move.b	(a0)+,(a1)			*黒部分書き込み
		move.b	(a0)+,$001(a1)
		move.b	(a0)+,$080(a1)
		move.b	(a0)+,$081(a1)
		move.b	(a0)+,$100(a1)
		move.b	(a0)+,$101(a1)
		move.b	(a0)+,$180(a1)
		move.b	(a0)+,$181(a1)
		move.b	(a0)+,$200(a1)
		move.b	(a0)+,$201(a1)
		move.b	(a0)+,$280(a1)
		move.b	(a0)+,$281(a1)
		move.b	(a0)+,$300(a1)
		move.b	(a0)+,$301(a1)
		move.b	(a0)+,$380(a1)
		move.b	(a0)+,$381(a1)
		move.b	(a0)+,$400(a1)
		move.b	(a0)+,$401(a1)
		move.b	(a0)+,$480(a1)
		move.b	(a0)+,$481(a1)
		move.b	(a0)+,$500(a1)
		move.b	(a0)+,$501(a1)
		move.b	(a0)+,$580(a1)
		move.b	(a0)+,$581(a1)
.endif

		move.l	#TXTADR2,a1
		add.l	d2,a1

		lea.l	MSw_CHR0(pc),a0
		lea.l	0(a0,d0.w),a0

		move.b	(a0)+,(a1)			*白部分書き込み
		move.b	(a0)+,$001(a1)
		move.b	(a0)+,$080(a1)
		move.b	(a0)+,$081(a1)
		move.b	(a0)+,$100(a1)
		move.b	(a0)+,$101(a1)
		move.b	(a0)+,$180(a1)
		move.b	(a0)+,$181(a1)
		move.b	(a0)+,$200(a1)
		move.b	(a0)+,$201(a1)
		move.b	(a0)+,$280(a1)
		move.b	(a0)+,$281(a1)
		move.b	(a0)+,$300(a1)
		move.b	(a0)+,$301(a1)
		move.b	(a0)+,$380(a1)
		move.b	(a0)+,$381(a1)
		move.b	(a0)+,$400(a1)
		move.b	(a0)+,$401(a1)
		move.b	(a0)+,$480(a1)
		move.b	(a0)+,$481(a1)
		move.b	(a0)+,$500(a1)
		move.b	(a0)+,$501(a1)
		move.b	(a0)+,$580(a1)
		move.b	(a0)+,$581(a1)

.if 0
		movem.l	d0/a0,-(sp)		*マウス座標を表示(デバッグ用)
		movea.l	#BGADR+32*2+80*$80,a0
		move.w	MOUSE_X(a6),d0
		bsr	PRINT10_5KETA
		movea.l	#BGADR+35*2+80*$80,a0
		move.w	MOUSE_Y(a6),d0
		bsr	PRINT10_5KETA
		movem.l	(sp)+,d0/a0
.endif

ms_move10:
		tst.l	DRAG_FUNC(a6)		*ドラッグ中ならば、
		beq	ms_move20
		bsr	PANEL_DRAG		*ドラッグ処理関数を呼び出す
		bra	ms_move90

ms_move20:
		tst.w	d3			*クリックされたら、パネル処理
		beq	ms_move90
		bsr	PANEL_EVENT

ms_move90:
*		movem.l	(sp)+,d0-d3/a0-a1
		rts

MOUSE_ERASE:
		movem.l	d1-d2/a0-a1,-(sp)

		lea.l	MOUSE_X(a6),a0
		tst.l	(a0)				*まだカーソルが書かれて
		bmi	ms_erase_done			*	なかったら何もしない

		moveq.l	#0,d2
		move.w	(a0),d1
		lsr.w	#3,d1
		move.w	2(a0),d2
		lsl.l	#7,d2
		or.w	d1,d2

		move.l	#TXTADR2,a1
		move.l	#TXTADR3,a0
		add.l	d2,a1
		add.l	d2,a0

		clr.b	$080(a1)			*カーソル消す
		clr.b	$100(a1)
		clr.b	$180(a1)
		clr.b	$200(a1)
		clr.b	$280(a1)
		clr.b	$300(a1)
		clr.b	$380(a1)
		clr.b	$400(a1)
		clr.b	$480(a1)
		clr.b	$500(a1)
		clr.b	$580(a1)
		clr.b	(a1)+

		clr.b	(a1)
		clr.b	$080(a1)
		clr.b	$100(a1)
		clr.b	$180(a1)
		clr.b	$200(a1)
		clr.b	$280(a1)
		clr.b	$300(a1)
		clr.b	$380(a1)
		clr.b	$400(a1)
		clr.b	$480(a1)
		clr.b	$500(a1)
		clr.b	$580(a1)
.if 0
		clr.b	$080(a0)
		clr.b	$100(a0)
		clr.b	$180(a0)
		clr.b	$200(a0)
		clr.b	$280(a0)
		clr.b	$300(a0)
		clr.b	$380(a0)
		clr.b	$400(a0)
		clr.b	$480(a0)
		clr.b	$500(a0)
		clr.b	$580(a0)
		clr.b	(a0)+

		clr.b	(a0)
		clr.b	$080(a0)
		clr.b	$100(a0)
		clr.b	$180(a0)
		clr.b	$200(a0)
		clr.b	$280(a0)
		clr.b	$300(a0)
		clr.b	$380(a0)
		clr.b	$400(a0)
		clr.b	$480(a0)
		clr.b	$500(a0)
		clr.b	$580(a0)
.endif
ms_erase_done:
		movem.l	(sp)+,d1-d2/a0-a1
		rts


MSw_CHR0:	.dc.w	%1100000000000000		*白部分データー
		.dc.w	%1010000000000000		*（黒＞白の優先順位）
		.dc.w	%1001000000000000
		.dc.w	%1000100000000000
		.dc.w	%1000010000000000
		.dc.w	%1000001000000000
		.dc.w	%1000000100000000
		.dc.w	%1000111110000000
		.dc.w	%1001000000000000
		.dc.w	%1010000000000000
		.dc.w	%1100000000000000
		.dc.w	%1000000000000000


MSw_CHR1:	.dc.w	%0110000000000000
		.dc.w	%0101000000000000
		.dc.w	%0100100000000000
		.dc.w	%0100010000000000
		.dc.w	%0100001000000000
		.dc.w	%0100000100000000
		.dc.w	%0100000010000000
		.dc.w	%0100011111000000
		.dc.w	%0100100000000000
		.dc.w	%0101000000000000
		.dc.w	%0110000000000000
		.dc.w	%0100000000000000

MSw_CHR2:	.dc.w	%0011000000000000
		.dc.w	%0010100000000000
		.dc.w	%0010010000000000
		.dc.w	%0010001000000000
		.dc.w	%0010000100000000
		.dc.w	%0010000010000000
		.dc.w	%0010000001000000
		.dc.w	%0010001111100000
		.dc.w	%0010010000000000
		.dc.w	%0010100000000000
		.dc.w	%0011000000000000
		.dc.w	%0010000000000000


MSw_CHR3:	.dc.w	%0001100000000000
		.dc.w	%0001010000000000
		.dc.w	%0001001000000000
		.dc.w	%0001000100000000
		.dc.w	%0001000010000000
		.dc.w	%0001000001000000
		.dc.w	%0001000000100000
		.dc.w	%0001000111110000
		.dc.w	%0001001000000000
		.dc.w	%0001010000000000
		.dc.w	%0001100000000000
		.dc.w	%0001000000000000

MSw_CHR4:	.dc.w	%0000110000000000
		.dc.w	%0000101000000000
		.dc.w	%0000100100000000
		.dc.w	%0000100010000000
		.dc.w	%0000100001000000
		.dc.w	%0000100000100000
		.dc.w	%0000100000010000
		.dc.w	%0000100011111000
		.dc.w	%0000100100000000
		.dc.w	%0000101000000000
		.dc.w	%0000110000000000
		.dc.w	%0000100000000000


MSw_CHR5:	.dc.w	%0000011000000000
		.dc.w	%0000010100000000
		.dc.w	%0000010010000000
		.dc.w	%0000010001000000
		.dc.w	%0000010000100000
		.dc.w	%0000010000010000
		.dc.w	%0000010000001000
		.dc.w	%0000010001111100
		.dc.w	%0000010010000000
		.dc.w	%0000010100000000
		.dc.w	%0000011000000000
		.dc.w	%0000010000000000

MSw_CHR6:	.dc.w	%0000001100000000
		.dc.w	%0000001010000000
		.dc.w	%0000001001000000
		.dc.w	%0000001000100000
		.dc.w	%0000001000010000
		.dc.w	%0000001000001000
		.dc.w	%0000001000000100
		.dc.w	%0000001000111110
		.dc.w	%0000001001000000
		.dc.w	%0000001010000000
		.dc.w	%0000001100000000
		.dc.w	%0000001000000000


MSw_CHR7:	.dc.w	%0000000110000000
		.dc.w	%0000000101000000
		.dc.w	%0000000100100000
		.dc.w	%0000000100010000
		.dc.w	%0000000100001000
		.dc.w	%0000000100000100
		.dc.w	%0000000100000010
		.dc.w	%0000000100011111
		.dc.w	%0000000100100000
		.dc.w	%0000000101000000
		.dc.w	%0000000110000000
		.dc.w	%0000000100000000

.if 0
MSb_CHR0:	.dc.w	%0000000000000000		*黒部分データー
		.dc.w	%0100000000000000
		.dc.w	%0110000000000000
		.dc.w	%0111000000000000
		.dc.w	%0111100000000000
		.dc.w	%0111110000000000
		.dc.w	%0111111000000000
		.dc.w	%0111000000000000
		.dc.w	%0110000000000000
		.dc.w	%0100000000000000
		.dc.w	%0000000000000000
		.dc.w	%0000000000000000


MSb_CHR1:	.dc.w	%0000000000000000
		.dc.w	%0010000000000000
		.dc.w	%0011000000000000
		.dc.w	%0011100000000000
		.dc.w	%0011110000000000
		.dc.w	%0011111000000000
		.dc.w	%0011111100000000
		.dc.w	%0011100000000000
		.dc.w	%0011000000000000
		.dc.w	%0010000000000000
		.dc.w	%0000000000000000
		.dc.w	%0000000000000000

MSb_CHR2:	.dc.w	%0000000000000000
		.dc.w	%0001000000000000
		.dc.w	%0001100000000000
		.dc.w	%0001110000000000
		.dc.w	%0001111000000000
		.dc.w	%0001111100000000
		.dc.w	%0001111110000000
		.dc.w	%0001110000000000
		.dc.w	%0001100000000000
		.dc.w	%0001000000000000
		.dc.w	%0000000000000000
		.dc.w	%0000000000000000


MSb_CHR3:	.dc.w	%0000000000000000
		.dc.w	%0000100000000000
		.dc.w	%0000110000000000
		.dc.w	%0000111000000000
		.dc.w	%0000111100000000
		.dc.w	%0000111110000000
		.dc.w	%0000111111000000
		.dc.w	%0000111000000000
		.dc.w	%0000110000000000
		.dc.w	%0000100000000000
		.dc.w	%0000000000000000
		.dc.w	%0000000000000000

MSb_CHR4:	.dc.w	%0000000000000000
		.dc.w	%0000010000000000
		.dc.w	%0000011000000000
		.dc.w	%0000011100000000
		.dc.w	%0000011110000000
		.dc.w	%0000011111000000
		.dc.w	%0000011111100000
		.dc.w	%0000011100000000
		.dc.w	%0000011000000000
		.dc.w	%0000010000000000
		.dc.w	%0000000000000000
		.dc.w	%0000000000000000


MSb_CHR5:	.dc.w	%0000000000000000
		.dc.w	%0000001000000000
		.dc.w	%0000001100000000
		.dc.w	%0000001110000000
		.dc.w	%0000001111000000
		.dc.w	%0000001111100000
		.dc.w	%0000001111110000
		.dc.w	%0000001110000000
		.dc.w	%0000001100000000
		.dc.w	%0000001000000000
		.dc.w	%0000000000000000
		.dc.w	%0000000000000000

MSb_CHR6:	.dc.w	%0000000000000000
		.dc.w	%0000000100000000
		.dc.w	%0000000110000000
		.dc.w	%0000000111000000
		.dc.w	%0000000111100000
		.dc.w	%0000000111110000
		.dc.w	%0000000111111000
		.dc.w	%0000000111000000
		.dc.w	%0000000110000000
		.dc.w	%0000000100000000
		.dc.w	%0000000000000000
		.dc.w	%0000000000000000


MSb_CHR7:	.dc.w	%0000000000000000
		.dc.w	%0000000010000000
		.dc.w	%0000000011000000
		.dc.w	%0000000011100000
		.dc.w	%0000000011110000
		.dc.w	%0000000011111000
		.dc.w	%0000000011111100
		.dc.w	%0000000011100000
		.dc.w	%0000000011000000
		.dc.w	%0000000010000000
		.dc.w	%0000000000000000
		.dc.w	%0000000000000000
.endif

		.end
